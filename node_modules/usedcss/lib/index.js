'use strict';

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fs = require('fs');

var _multiGlob = require('multi-glob');

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _nodeNoop = require('node-noop');

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _angularExpressions = require('angular-expressions');

var _angularExpressions2 = _interopRequireDefault(_angularExpressions);

var _isRegex = require('is-regex');

var _isRegex2 = _interopRequireDefault(_isRegex);

var _angularTemplatecacheExtract = require('angular-templatecache-extract');

var _angularTemplatecacheExtract2 = _interopRequireDefault(_angularTemplatecacheExtract);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _postcss2.default.plugin('usedcss', function (options) {
  var htmls = [];
  return function (css) {
    return new _bluebird2.default(function (resolve, reject) {
      if (!options.html && !options.js) {
        reject('Neither html nor js files was specified.');
        return;
      }
      if (options.ignore && !Array.isArray(options.ignore)) {
        reject('ignore option should be an array.');
        return;
      }
      if (options.ignoreRegexp && !Array.isArray(options.ignoreRegexp)) {
        reject('ignoreRegexp option should be an array.');
        return;
      }
      if (options.ngclass && typeof options.ngclass !== 'boolean') {
        reject('ngclass option should be boolean.');
        return;
      }
      if (options.ignoreNesting && typeof options.ignoreNesting !== 'boolean') {
        reject('ignoreNesting option should be boolean.');
        return;
      }
      if (options.templateMode && typeof options.templateMode !== 'boolean') {
        reject('templateMode option should be boolean.');
        return;
      }
      if (options.templateCache && typeof options.templateCache !== 'boolean') {
        reject('templateCache option should be boolean.');
        return;
      }
      if (options.templateCache && !options.js) {
        reject('templateCache option require js files to be specified.');
        return;
      }
      var promise = void 0;
      if (options.ignoreNesting && options.ignore) {
        promise = _bluebird2.default.map(options.ignore, function (item, i) {
          options.ignore[i] = item.replace(/^.*( |>|<)/g, '');
        });
      } else {
        promise = _bluebird2.default.resolve();
      }
      promise.then(function () {
        var prs = [];
        if (options.html) {
          prs.push(_bluebird2.default.promisify(_multiGlob.glob)(options.html).then(function (files) {
            return _bluebird2.default.map(files, function (file) {
              return _bluebird2.default.promisify(_fs.readFile)(file).then(function (content) {
                htmls.push(_cheerio2.default.load(content.toString()));
                return _bluebird2.default.resolve();
              });
            });
          }));
        }
        if (options.js && options.templateCache) {
          prs.push(_bluebird2.default.promisify(_multiGlob.glob)(options.js).then(function (files) {
            return _bluebird2.default.map(files, function (file) {
              return _bluebird2.default.promisify(_fs.readFile)(file).then(function (content) {
                return (0, _angularTemplatecacheExtract2.default)(content.toString()).then(function (tpls) {
                  return _bluebird2.default.map(tpls, function (tpl) {
                    htmls.push(_cheerio2.default.load(tpl));
                    return _bluebird2.default.resolve();
                  });
                });
              });
            });
          }));
        }
        return _bluebird2.default.all(prs).then(function () {
          if (options.ngclass) {
            return _bluebird2.default.map(htmls, function (html) {
              html('[ng-class], [data-ng-class]').each(function (i, el) {
                var cls = [];
                var ngcl = html(el).attr('ng-class');
                if (ngcl) {
                  cls = cls.concat(Object.keys(_angularExpressions2.default.compile(ngcl)()));
                }
                var datang = html(el).attr('data-ng-class');
                if (datang) {
                  cls = cls.concat(Object.keys(_angularExpressions2.default.compile(datang)()));
                }
                cls.forEach(function (cl) {
                  html(el).addClass(cl);
                });
              });
              return _bluebird2.default.resolve();
            });
          }
          return _bluebird2.default.resolve();
        }).then(function () {
          var promises = [];

          css.walkRules(function (rule) {
            // ignore keyframes
            if (rule.parent.type === 'atrule' && /keyframes/.test(rule.parent.name)) {
              return;
            }

            // if we found an element, we reject the promise and do nothing
            // promise is resolved if we found nothing after iteration
            // in this case, we remove a rule
            // sounds hacky, but it works
            promises.push(_bluebird2.default.map(rule.selectors, function (selector) {
              var pr = void 0;
              if (options.ignoreRegexp) {
                pr = _bluebird2.default.map(options.ignoreRegexp, function (item) {
                  if (!(0, _isRegex2.default)(item)) {
                    item = new RegExp(item);
                  }
                  if (item.test(selector)) {
                    return _bluebird2.default.reject();
                  }
                });
              } else {
                pr = _bluebird2.default.resolve();
              }
              return pr.then(function () {
                // remove pseudo-classes from selectors
                selector = selector.replace(/::?[a-zA-Z-]*$/g, '');
                if (options.ignoreNesting) {
                  selector = selector.replace(/^.*( |>|<)/g, '');
                }
                if (options.templateMode) {
                  selector = selector.split(/[ <>]/);
                  if (selector.every(function (sel) {
                    if (sel === '') {
                      return true;
                    }
                    return htmls.some(function (html) {
                      return html(sel).length > 0 || options.ignore && options.ignore.indexOf(selector) > -1;
                    });
                  })) {
                    return _bluebird2.default.reject();
                  }
                  return _bluebird2.default.resolve();
                }
                return _bluebird2.default.map(htmls, function (html) {
                  if (html(selector).length > 0 || options.ignore && options.ignore.indexOf(selector) > -1) {
                    return _bluebird2.default.reject();
                  }
                  return _bluebird2.default.resolve();
                });
              });
            }).then(function () {
              rule.remove();
              return _bluebird2.default.resolve();
            }).catch(_nodeNoop.noop));
          });
          return _bluebird2.default.all(promises);
        });
      }).then(resolve).catch(reject);
    });
  };
});